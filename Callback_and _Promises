Assignment 1
Write a function sumAsync that takes two numbers as arguments and uses a callback to return their sum after a delay of 1 second.
function sumAsync(a, b, callback) {
  setTimeout(() => {
    callback(a + b);
  }, 1000);
}
sumAsync(5, 3, (result) => {
  console.log("Sum:", result);
});

Assignment 2
Create a function getData that returns a Promise. The Promise should resolve after 2 seconds with a message "Data fetched successfully."
function getData() {
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve("Data fetched successfully.");
    }, 2000);
  });
}
getData().then((msg) => console.log(msg));

Assignment 3
Write an asynchronous function fetchData that uses the Fetch API to retrieve data from a given URL and returns the parsed JSON response.
async function fetchData(url) {
  const response = await fetch(url);
  const data = await response.json();
  return data;
}
fetchData("https://jsonplaceholder.typicode.com/todos/1")
  .then(data => console.log(data));

Assignment 4
Write an asynchronous function fetchData that uses the Fetch API to retrieve data from a given URL and returns the parsed JSON response.
async function fetchData(url) {
  const response = await fetch(url);
  const data = await response.json();
  return data;
}
fetchData("https://jsonplaceholder.typicode.com/todos/1")
  .then(data => console.log(data));

Assignment 5
Implement a function multiplyWithCallback that takes an array of numbers and a callback function. The function should multiply each element of the array by 2 and pass the result to the callback.
function multiplyWithCallback(arr, callback) {
  const result = arr.map(num => num * 2);
  callback(result);
}
multiplyWithCallback([1, 2, 3], (res) => {
  console.log("Result:", res);
});

Assignment 6
Create a function fetchUserDataAndPosts that fetches user details and their posts.
async function fetchUserDataAndPosts(userId) {
  const userResponse = await fetch(`https://jsonplaceholder.typicode.com/users/${userId}`);
  const user = await userResponse.json();
  const postResponse = await fetch(`https://jsonplaceholder.typicode.com/posts?userId=${userId}`);
  const posts = await postResponse.json();
  return {
    user,
    posts
  };
}
fetchUserDataAndPosts(1).then(data => console.log(data));

Assignment 7
Write a function fetchMultipleData that takes an array of URLs and uses Promise.all to fetch data from all the URLs concurrently.
async function fetchMultipleData(urls) {
  const responses = await Promise.all(urls.map(url => fetch(url).then(res => res.json())));
  return responses;
}
const urls = [
  "https://jsonplaceholder.typicode.com/todos/1",
  "https://jsonplaceholder.typicode.com/todos/2"
];
fetchMultipleData(urls).then(data => console.log(data));

Assignment 8
Create a function racePromises that takes an array of promises and returns the result of the first promise that resolves or rejects. Use Promise.race() to implement this.
function racePromises(promises) {
  return Promise.race(promises);
}
const p1 = new Promise(resolve => setTimeout(() => resolve("First"), 1000));
const p2 = new Promise(resolve => setTimeout(() => resolve("Second"), 2000));
racePromises([p1, p2]).then(result => console.log(result));
