1. You are developing the error handling mechanism for an online shopping cart application. The application allows 
users to add products to their cart and proceed to checkout. Implement error handling to address different types of errors that might occur 
during the shopping process.

Task 1: Add Product to Cart Function
let cart = [];
function addToCart(name, price, quantity) {
  if (!name) {
    throw new Error("Product name is required.");
  }
  if (typeof price !== "number" || price <= 0) {
    throw new Error("Invalid product price.");
  }
  if (!Number.isInteger(quantity) || quantity <= 0) {
    throw new Error("Invalid quantity.");
  }
  cart.push({ name, price, quantity });
}

Task 2: Checkout Function
function checkout() {
  if (cart.length === 0) {
    throw new Error("Cart is empty. Add items before checkout.");
  }
  console.log("Checkout successful. Items:", cart);
}

2. You are working on a user authentication module for a web application. Implement error handling for the login process. Create a function login that 
simulates the user login process. The function should take the username and password as parameters and throw errors under certain conditions:
If the username is not provided, throw an error indicating "Username is required."
If the password is not provided, throw an error indicating "Password is required."
If the username and password do not match any valid credentials, throw an error indicating "Invalid username or password."
const validUser = {
  username: "user123",
  password: "password123"
};
function login(username, password) {
  if (!username) {
    throw new Error("Username is required.");
  }
  if (!password) {
    throw new Error("Password is required.");
  }
  if (username !== validUser.username || password !== validUser.password) {
    throw new Error("Invalid username or password.");
  }
  console.log("Login successful.");
}

3. You are developing a payment processing module for an e-commerce platform. Implement error handling for the payment transaction process. Create a function processPayment that simulates processing a payment transaction. The function 
should take payment details (amount, card number, expiration date) as parameters and throw errors under certain conditions:
If the payment amount is not a positive number, throw an error indicating "Invalid payment amount."
If the card number is not provided or is not a valid credit card number, throw an error indicating "Invalid card number."
If the expiration date is not provided or is in the past, throw an error indicating "Invalid expiration date."

function processPayment(amount, cardNumber, expirationDate) {
  if (typeof amount !== "number" || amount <= 0) {
    throw new Error("Invalid payment amount.");
  }
  const cardRegex = /^\d{4}-\d{4}-\d{4}-\d{4}$/;
  if (!cardNumber || !cardRegex.test(cardNumber)) {
    throw new Error("Invalid card number.");
  }
  const today = new Date();
  const expDate = new Date(expirationDate);
  if (!expirationDate || expDate < today) {
    throw new Error("Invalid expiration date.");
  }
  console.log("Payment processed successfully.");
}
