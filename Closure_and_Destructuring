Q1. You are building a counter application that tracks the number of times a button is clicked. Implement the counter using closure.
function createCounter() {
  let count = 0;
  return function () {
    count++;
    console.log("Count:", count);
  };
}
const counter = createCounter();
counter(); 
counter();

Q2. You have an object representing a customer order with properties orderId, productName, and quantity. Use destructuring to extract and print these properties.
let order = {
  orderId: "123456",
  productName: "Laptop",
  quantity: 2
};
let { orderId, productName, quantity } = order;
console.log(orderId, productName, quantity);

Q3. Implement the cart feature using JavaScript closure. Create a cart array and return a function to getCartItems.
function shoppingCart() {
  let cartItems = [];

  return {
    getCartItems: function () {
      return cartItems;
    }
  };
}
const cart = shoppingCart();
console.log("Cart Items:", cart.getCartItems());

Q4. Implement the add to cart feature. Add items with productId, name, quantity, and price. If item exists, increase quantity.
function shoppingCart() {
  let cartItems = [];
  return {
    getCartItems: function () {
      return cartItems;
    },
    addItem: function (product) {
      let found = cartItems.find(item => item.id === product.id);
      if (found) {
        found.quantity += 1;
      } else {
        cartItems.push({ ...product, quantity: 1 });
      }
    }
  };
}
const cart = shoppingCart();
const product1 = { id: 1, name: "Product 1", price: 10 };
const product2 = { id: 2, name: "Product 2", price: 20 };
cart.addItem(product1);
cart.addItem(product1);
cart.addItem(product2);
console.log("Cart Items:", cart.getCartItems());

Q5. Implement remove item from cart. Use productId to remove item from cartItems array.
function shoppingCart() {
  let cartItems = [];
  return {
    getCartItems: function () {
      return cartItems;
    },
    addItem: function (product) {
      let found = cartItems.find(item => item.id === product.id);
      if (found) {
        found.quantity += 1;
      } else {
        cartItems.push({ ...product, quantity: 1 });
      }
    },
    removeItem: function (id) {
      cartItems = cartItems.filter(item => item.id !== id);
    }
  };
}
const cart = shoppingCart();
const product1 = { id: 1, name: "Product 1", price: 10 };
const product2 = { id: 2, name: "Product 2", price: 20 };
cart.addItem(product1);
cart.addItem(product1);
cart.addItem(product2);
console.log("Cart Items:", cart.getCartItems());
cart.removeItem(2);
console.log("Cart Items:", cart.getCartItems());

Q6. You are developing a music playlist management system.
Task 1: Create a function createPlaylist that takes a playlist name as a parameter and returns a closure.
function createPlaylist(name) {
  let songs = [];
  return {
    name,
    songs,
    addSong(song, artist) {
      songs.push({ song, artist });
    },
    listSongs() {
      console.log(`${name} Playlist:`);
      songs.forEach(s => {
        console.log(`${s.song} by ${s.artist}`);
      });
    }
  };
}

Task 2: Create a function addSong that adds the song to the specified playlist.
function addSong(playlist, song, artist) {
  playlist.addSong(song, artist);
}

Task 3: Create a function listSongs that lists all the songs in a playlist.
function listSongs(playlist) {
  playlist.listSongs();
}
